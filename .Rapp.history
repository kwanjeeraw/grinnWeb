xxx
str_trim
install.packages("stringr")
str_trim
library("stringr")
str_trim
?str_trim
str_sub
xxx
xref
str_sub(xref,1,-1)
str_sub(xref,2,-2)
str_sub(xref,3,-3)
xxx=strsplit(str_sub(xref,3,-3),split="\",\"")
xxx
dummy = read.csv(file="~/Sites/dummy.csv",header=T)
dummy
dummy = read.csv(file="~/Sites/dummy.csv",header=T, row.names=F)
dummy = read.csv(file="~/Sites/dummy.csv",header=T)
dim(dummy)
length(dummy)
nrow(dummy)
ncol(dummy)
colnames(dummy)[1]
colnames(dummy)[2]
colnames(dummy)[8]
dummy[1]
dummy[1][1]
dummy[[1]]
dummy[[1]][[1]]
dummy[[1]][[2]]
dummy[[1]][[3]]
as.character(dummy[[1]][[3]])
as.character(dummy[[2]][[3]])
as.character(dummy[[2]][[4]])
as.character(dummy[[2]][[8]])
as.character(dummy[[2]][[12]])
colnames(dummy)
as.character(dummy[[1]][[1]])
as.character(dummy[[2]][[1]])
as.character(dummy[[3]][[1]])
as.character(dummy[[4]][[1]])
as.character(dummy[[3]][[2]])
as.character(dummy[[12]][[2]])
for(j in 1:ncol(dummy)){#
		prop = cat(colnames(dummy)[j],"=",as.character(dummy[[j]][[i]]))#
	}
i =1
for(j in 1:ncol(dummy)){#
		prop = cat(colnames(dummy)[j],"=",as.character(dummy[[j]][[i]]))#
	}
mid = comp[[1]]$ENTRY[[1]]
mid
for(j in 1:ncol(dummy)){#
		prop = cat(colnames(dummy)[j],"=",as.character(dummy[[j]][[i]]),",")#
	}
as.character(dummy$GID)
as.character(dummy$GID)[[1]]
colnames(dummy)
dummy
synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")
synonym
synonym = strsplit(str_sub(as.character(dummy$synonym)[[2]],3,-3),split="\",\"")
synonym
synonym = strsplit(str_sub(as.character(dummy$synonym)[[3]],3,-3),split="\",\"")
synonym
xref = strsplit(str_sub(as.character(dummy$xref)[[i]],3,-3),split="\",\"")
xref
for (i in 1:nrow(dummy)){#
	cat("... Creating metabolite node: ",i,"\n")#
	GID = as.character(dummy$GID)[[i]]#
	name = as.character(dummy$name)[[i]]#
	IUPAC = as.character(dummy$IUPAC)[[i]]#
	synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")#
	description = as.character(dummy$description)[[i]]#
	structure = as.character(dummy$structure)[[i]]#
	formula = as.character(dummy$formula)[[i]]#
	molWeight = as.character(dummy$molWeight)[[i]]#
	SMILES = as.character(dummy$SMILES)[[i]]#
	InChI = as.character(dummy$InChI)[[i]]#
	InChIKey = as.character(dummy$InChIKey)[[i]]#
	xref = strsplit(str_sub(as.character(dummy$xref)[[i]],3,-3),split="\",\"")#
	prop = cat("GID=",GID,", name=",name,", IUPAC=",IUPAC,", synonym=",synonym,#
				", description=",description,", structure=",structure,", formula=",formula,#
				", molWeight=",molWeight,", SMILES=",SMILES,", InChI=",InChI,#
				", InChIKey=",InChIKey,", xref=",xref)#
	)#
  	createNode(graph, "Metabolite", prop)#
}
prop
for (i in 1:nrow(dummy)){#
	cat("... Creating metabolite node: ",i,"\n")#
	GID = as.character(dummy$GID)[[i]]#
	name = as.character(dummy$name)[[i]]#
	IUPAC = as.character(dummy$IUPAC)[[i]]#
	synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")#
	description = as.character(dummy$description)[[i]]#
	structure = as.character(dummy$structure)[[i]]#
	formula = as.character(dummy$formula)[[i]]#
	molWeight = as.character(dummy$molWeight)[[i]]#
	SMILES = as.character(dummy$SMILES)[[i]]#
	InChI = as.character(dummy$InChI)[[i]]#
	InChIKey = as.character(dummy$InChIKey)[[i]]#
	xref = strsplit(str_sub(as.character(dummy$xref)[[i]],3,-3),split="\",\"")#
	prop = cat("GID=",GID,", name=",name,", IUPAC=",IUPAC,", synonym=",synonym,#
				", description=",description,", structure=",structure,", formula=",formula,#
				", molWeight=",molWeight,", SMILES=",SMILES,", InChI=",InChI,#
				", InChIKey=",InChIKey,", xref=",xref)#
  	createNode(graph, "Metabolite", prop)#
}
for (i in 1:nrow(dummy)){#
	cat("... Creating metabolite node: ",i,"\n")#
	GID = as.character(dummy$GID)[[i]]#
	name = as.character(dummy$name)[[i]]#
	IUPAC = as.character(dummy$IUPAC)[[i]]#
	synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")#
	synonym  = if(is.null(synonym)){c("")} else{unlist(strsplit(synonym,split="\t"))}#
	description = as.character(dummy$description)[[i]]#
	structure = as.character(dummy$structure)[[i]]#
	formula = as.character(dummy$formula)[[i]]#
	molWeight = as.character(dummy$molWeight)[[i]]#
	SMILES = as.character(dummy$SMILES)[[i]]#
	InChI = as.character(dummy$InChI)[[i]]#
	InChIKey = as.character(dummy$InChIKey)[[i]]#
	xref = strsplit(str_sub(as.character(dummy$xref)[[i]],3,-3),split="\",\"")#
	xref = if(is.null(xref)){c("")} else{unlist(strsplit(xref,split="\t"))}#
	prop = cat("GID=",GID,", name=",name,", IUPAC=",IUPAC,", synonym=",synonym,#
				", description=",description,", structure=",structure,", formula=",formula,#
				", molWeight=",molWeight,", SMILES=",SMILES,", InChI=",InChI,#
				", InChIKey=",InChIKey,", xref=",xref)#
  	createNode(graph, "Metabolite", prop)#
}
synonym
strsplit(synonym, split = "\t")
strsplit(synonym[[1]], split = "\t")
for (i in 1:nrow(dummy)){#
	cat("... Creating metabolite node: ",i,"\n")#
	GID = as.character(dummy$GID)[[i]]#
	name = as.character(dummy$name)[[i]]#
	IUPAC = as.character(dummy$IUPAC)[[i]]#
	synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")#
	synonym  = if(is.null(synonym)){c("")} else{unlist(strsplit(synonym[[1]],split="\t"))}#
	description = as.character(dummy$description)[[i]]#
	structure = as.character(dummy$structure)[[i]]#
	formula = as.character(dummy$formula)[[i]]#
	molWeight = as.character(dummy$molWeight)[[i]]#
	SMILES = as.character(dummy$SMILES)[[i]]#
	InChI = as.character(dummy$InChI)[[i]]#
	InChIKey = as.character(dummy$InChIKey)[[i]]#
	xref = strsplit(str_sub(as.character(dummy$xref)[[i]],3,-3),split="\",\"")#
	xref = if(is.null(xref)){c("")} else{unlist(strsplit(xref[[1]],split="\t"))}#
	prop = cat("GID=",GID,", name=",name,", IUPAC=",IUPAC,", synonym=",synonym,#
				", description=",description,", structure=",structure,", formula=",formula,#
				", molWeight=",molWeight,", SMILES=",SMILES,", InChI=",InChI,#
				", InChIKey=",InChIKey,", xref=",xref)#
  	createNode(graph, "Metabolite", prop)#
}
prop
prop = cat("GID=",GID,", name=",name,", IUPAC=",IUPAC,", synonym=",synonym,#
				", description=",description,", structure=",structure,", formula=",formula,#
				", molWeight=",molWeight,", SMILES=",SMILES,", InChI=",InChI,#
				", InChIKey=",InChIKey,", xref=",xref)
prop
prop = paste("GID=",GID,", name=",name,", IUPAC=",IUPAC,", synonym=",synonym,#
				", description=",description,", structure=",structure,", formula=",formula,#
				", molWeight=",molWeight,", SMILES=",SMILES,", InChI=",InChI,#
				", InChIKey=",InChIKey,", xref=",xref)
proo
prop
for (i in 1:nrow(dummy)){#
	cat("... Creating metabolite node: ",i,"\n")#
	GID = as.character(dummy$GID)[[i]]#
	name = as.character(dummy$name)[[i]]#
	IUPAC = as.character(dummy$IUPAC)[[i]]#
	synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")#
	synonym  = if(is.null(synonym)){c("")} else{unlist(strsplit(synonym[[1]],split="\t"))}#
	description = as.character(dummy$description)[[i]]#
	structure = as.character(dummy$structure)[[i]]#
	formula = as.character(dummy$formula)[[i]]#
	molWeight = as.character(dummy$molWeight)[[i]]#
	SMILES = as.character(dummy$SMILES)[[i]]#
	InChI = as.character(dummy$InChI)[[i]]#
	InChIKey = as.character(dummy$InChIKey)[[i]]#
	xref = strsplit(str_sub(as.character(dummy$xref)[[i]],3,-3),split="\",\"")#
	xref = if(is.null(xref)){c("")} else{unlist(strsplit(xref[[1]],split="\t"))}#
	prop = paste("GID=",GID,", name=",name,", IUPAC=",IUPAC,", synonym=",synonym,#
				", description=",description,", structure=",structure,", formula=",formula,#
				", molWeight=",molWeight,", SMILES=",SMILES,", InChI=",InChI,#
				", InChIKey=",InChIKey,", xref=",xref)#
  	createNode(graph, "Metabolite", prop)#
}
prop
rm(prop)
for (i in 1:nrow(dummy)){#
	cat("... Creating metabolite node: ",i,"\n")#
	GID = as.character(dummy$GID)[[i]]#
	name = as.character(dummy$name)[[i]]#
	IUPAC = as.character(dummy$IUPAC)[[i]]#
	synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")#
	synonym  = if(is.null(synonym)){c("")} else{unlist(strsplit(synonym[[1]],split="\t"))}#
	description = as.character(dummy$description)[[i]]#
	structure = as.character(dummy$structure)[[i]]#
	formula = as.character(dummy$formula)[[i]]#
	molWeight = as.character(dummy$molWeight)[[i]]#
	SMILES = as.character(dummy$SMILES)[[i]]#
	InChI = as.character(dummy$InChI)[[i]]#
	InChIKey = as.character(dummy$InChIKey)[[i]]#
	xref = strsplit(str_sub(as.character(dummy$xref)[[i]],3,-3),split="\",\"")#
	xref = if(is.null(xref)){c("")} else{unlist(strsplit(xref[[1]],split="\t"))}#
	prop = paste("GID=",GID,", name=",name,", IUPAC=",IUPAC,", synonym=",synonym,#
				", description=",description,", structure=",structure,", formula=",formula,#
				", molWeight=",molWeight,", SMILES=",SMILES,", InChI=",InChI,#
				", InChIKey=",InChIKey,", xref=",xref)#
  	createNode(graph, "Metabolite", prop)#
}
prop
xref
for (i in 1:nrow(dummy)){#
	cat("... Creating metabolite node: ",i,"\n")#
	GID = as.character(dummy$GID)[[i]]#
	name = as.character(dummy$name)[[i]]#
	IUPAC = as.character(dummy$IUPAC)[[i]]#
	synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")#
	synonym  = if(is.null(synonym)){c("")} else{unlist(strsplit(synonym[[1]],split="\t"))}#
	description = as.character(dummy$description)[[i]]#
	structure = as.character(dummy$structure)[[i]]#
	formula = as.character(dummy$formula)[[i]]#
	molWeight = as.character(dummy$molWeight)[[i]]#
	SMILES = as.character(dummy$SMILES)[[i]]#
	InChI = as.character(dummy$InChI)[[i]]#
	InChIKey = as.character(dummy$InChIKey)[[i]]#
	xref = strsplit(str_sub(as.character(dummy$xref)[[i]],3,-3),split="\",\"")#
	xref = if(is.null(xref)){c("")} else{unlist(strsplit(xref[[1]],split="\t"))}#
  	createNode(graph, "Metabolite", GID=,GID, name=name, IUPAC=IUPAC, synonym=synonym,#
				description=description, structure=structure, formula=formula,#
				molWeight=molWeight, SMILES=SMILES, InChI=InChI,#
				InChIKey=InChIKey, xref=xref)#
}
for (i in 1:nrow(dummy)){#
	cat("... Creating metabolite node: ",i,"\n")#
	GID = as.character(dummy$GID)[[i]]#
	name = as.character(dummy$name)[[i]]#
	IUPAC = as.character(dummy$IUPAC)[[i]]#
	synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")#
	synonym  = if(is.null(synonym)){c("")} else{unlist(strsplit(synonym[[1]],split="\t"))}#
	description = as.character(dummy$description)[[i]]#
	structure = as.character(dummy$structure)[[i]]#
	formula = as.character(dummy$formula)[[i]]#
	molWeight = as.character(dummy$molWeight)[[i]]#
	SMILES = as.character(dummy$SMILES)[[i]]#
	InChI = as.character(dummy$InChI)[[i]]#
	InChIKey = as.character(dummy$InChIKey)[[i]]#
	xref = strsplit(str_sub(as.character(dummy$xref)[[i]],3,-3),split="\",\"")#
	xref = if(is.null(xref)){c("")} else{unlist(strsplit(xref[[1]],split="\t"))}#
  	createNode(graph, "Metabolite", GID=GID, name=name, IUPAC=IUPAC, synonym=synonym,#
				description=description, structure=structure, formula=formula,#
				molWeight=molWeight, SMILES=SMILES, InChI=InChI,#
				InChIKey=InChIKey, xref=xref)#
}
synonym
synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")
i
synonym
is.null(synonym)
is.na(synonym)
is.na(synonym[[1]])
is.null(synonym[[1]])
length(synonym[[1]])
for (i in 1:nrow(dummy)){#
	cat("... Creating metabolite node: ",i,"\n")#
	GID = as.character(dummy$GID)[[i]]#
	name = as.character(dummy$name)[[i]]#
	IUPAC = as.character(dummy$IUPAC)[[i]]#
	synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")#
	synonym  = if(length(synonym[[1]])==0){c("")} else{unlist(strsplit(synonym[[1]],split="\t"))}#
	description = as.character(dummy$description)[[i]]#
	structure = as.character(dummy$structure)[[i]]#
	formula = as.character(dummy$formula)[[i]]#
	molWeight = as.character(dummy$molWeight)[[i]]#
	SMILES = as.character(dummy$SMILES)[[i]]#
	InChI = as.character(dummy$InChI)[[i]]#
	InChIKey = as.character(dummy$InChIKey)[[i]]#
	xref = strsplit(str_sub(as.character(dummy$xref)[[i]],3,-3),split="\",\"")#
	xref = if(length(xref[[1]])==0){c("")} else{unlist(strsplit(xref[[1]],split="\t"))}#
  	createNode(graph, "Metabolite", GID=GID, name=name, IUPAC=IUPAC, synonym=synonym,#
				description=description, structure=structure, formula=formula,#
				molWeight=molWeight, SMILES=SMILES, InChI=InChI,#
				InChIKey=InChIKey, xref=xref)#
}
which(is.null(dummy))
which(length(dummy)==0)
as.data.frame(dummy)
dummy$xref
typeof(as.data.frame(dummy$xref))
typeof((dummy$xref))
dummy = as.data.frame(read.csv(file="~/Sites/dummy.csv",header=T))
dummy
dummy$xref
typeof(dummy$xref)
dummy$xref[[1]]
as.character(dummy$xref[[1]])
as.table(dummy)
?read.csv
dummy
dummy = read.csv(file="~/Sites/dummy.csv",header=T)
dummy
dummy[is.na(dummy)]<-0
dummy
dummy = read.csv(file="~/Sites/dummy.csv",header=T)#
dummy[is.na(dummy)]<-0#
for (i in 1:nrow(dummy)){#
	cat("... Creating metabolite node: ",i,"\n")#
	GID = as.character(dummy$GID)[[i]]#
	name = as.character(dummy$name)[[i]]#
	IUPAC = as.character(dummy$IUPAC)[[i]]#
	synonym = strsplit(str_sub(as.character(dummy$synonym)[[i]],3,-3),split="\",\"")#
	synonym  = if(length(synonym[[1]])==0){c("")} else{unlist(strsplit(synonym[[1]],split="\t"))}#
	description = as.character(dummy$description)[[i]]#
	structure = as.character(dummy$structure)[[i]]#
	formula = as.character(dummy$formula)[[i]]#
	molWeight = as.character(dummy$molWeight)[[i]]#
	SMILES = as.character(dummy$SMILES)[[i]]#
	InChI = as.character(dummy$InChI)[[i]]#
	InChIKey = as.character(dummy$InChIKey)[[i]]#
	xref = strsplit(str_sub(as.character(dummy$xref)[[i]],3,-3),split="\",\"")#
	xref = if(length(xref[[1]])==0){c("")} else{unlist(strsplit(xref[[1]],split="\t"))}#
  	createNode(graph, "Metabolite", GID=GID, name=name, IUPAC=IUPAC, synonym=synonym,#
				description=description, structure=structure, formula=formula,#
				molWeight=molWeight, SMILES=SMILES, InChI=InChI,#
				InChIKey=InChIKey, xref=xref)#
}
quit()
a
aaaaaaaa
library(KEGGREST)#
library(KEGGgraph)#
library(RNeo4j)#
library(UniProt.ws)#
library(biomaRt)#
library(XML)#
library(RCurl)#
library(jsonlite)#
library(stringr)
graph = startGraph("http://localhost:7474/db/data/")
cat("... Loading reactions from KEGG\n")#
RX = keggList("reaction") #load all kegg reactions#
cat("... Returning ", length(RX), " reactions from KEGG\n")#
addConstraint(graph, "Reaction", "GID")#
for (i in 1:length(RX)){#
  reac = keggGet(names(RX[i]))#
  if(i %% 100 == 0) cat("... Creating reaction node: ",i,"\n")#
  createNode(graph, "Reaction", GID = reac[[1]]$ENTRY[[1]], #
            name = ifelse(is.null(reac[[1]]$NAME), "", reac[[1]]$NAME),  #
            description = reac[[1]]$DEFINITION), equation = reac[[1]]$EQUATION,#
}
for (i in 1:length(RX)){#
  reac = keggGet(names(RX[i]))#
  if(i %% 100 == 0) cat("... Creating reaction node: ",i,"\n")#
  createNode(graph, "Reaction", GID = reac[[1]]$ENTRY[[1]], #
            name = ifelse(is.null(reac[[1]]$NAME), "", reac[[1]]$NAME),  #
            description = reac[[1]]$DEFINITION), equation = reac[[1]]$EQUATION#
}
for (i in 1:length(RX)){#
  reac = keggGet(names(RX[i]))#
  if(i %% 100 == 0) cat("... Creating reaction node: ",i,"\n")#
  createNode(graph, "Reaction", GID = reac[[1]]$ENTRY[[1]], #
            name = ifelse(is.null(reac[[1]]$NAME), "", reac[[1]]$NAME),  #
            description = reac[[1]]$DEFINITION), equation = reac[[1]]$EQUATION)#
}
for (i in 1:length(RX)){#
  reac = keggGet(names(RX[i]))#
  if(i %% 100 == 0) cat("... Creating reaction node: ",i,"\n")#
  createNode(graph, "Reaction", GID = reac[[1]]$ENTRY[[1]], #
            name = ifelse(is.null(reac[[1]]$NAME), "", reac[[1]]$NAME),  #
            description = reac[[1]]$DEFINITION, equation = reac[[1]]$EQUATION)#
}
graph
length(RX)
i
cat("... Returning ", length(RX), " reactions from KEGG\n")#
addConstraint(graph, "Reaction", "GID")
for (i in 1:length(RX)){#
  reac = keggGet(names(RX[i]))#
  if(i %% 100 == 0) cat("... Creating reaction node: ",i,"\n")#
  createNode(graph, "Reaction", GID = reac[[1]]$ENTRY[[1]], #
            name = ifelse(is.null(reac[[1]]$NAME), "", reac[[1]]$NAME),  #
            description = reac[[1]]$DEFINITION, equation = reac[[1]]$EQUATION)#
}
quit()
library(RNeo4j)#
library(stringr)
graph = startGraph("http://localhost:7474/db/data/")
rxNode = getUniqueNode(graph, "Metabolite", rid ="C00033")
rxNode = getUniqueNode(graph, "Metabolite", GID ="C00033")
rxNode
rxNode$xref
typeof(rxNode$xref)
c(rxNode$xref,"KEGG:C00033")
updateProp(rxNode, xref = c(rxNode$xref,"KEGG:C00033"))
xx=c(rxNode$xref,"KEGG:C00033")
updateProp(rxNode, xref = xx)
xx
typeof(xx)
updateProp(rxNode, xref = rxNode$xref)
updateProp(rxNode, xref = "ee")
c("CAS:64-19-7","PubChem:3335","ChEBI:15366","LIPIDMAPS:LMFA01010002","LipidBank:DFA0002","KNApSAcK:C00001176","PDB-CCD:ACTACY","3DMET:B00009","NIKKAJI:J2.355H","KEGG:C00033")
xx = c("CAS:64-19-7","PubChem:3335","ChEBI:15366","LIPIDMAPS:LMFA01010002","LipidBank:DFA0002","KNApSAcK:C00001176","PDB-CCD:ACTACY","3DMET:B00009","NIKKAJI:J2.355H","KEGG:C00033")
updateProp(rxNode, xref = xx)
xx = c(\"CAS:64-19-7\",\"PubChem:3335\",\"ChEBI:15366\",\"LIPIDMAPS:LMFA01010002\",\"LipidBank:DFA0002\",\"KNApSAcK:C00001176\",\"PDB-CCD:ACTACY\",\"3DMET:B00009\",\"NIKKAJI:J2.355H\",\"KEGG:C00033\")
xx = list("CAS:64-19-7","PubChem:3335","ChEBI:15366","LIPIDMAPS:LMFA01010002","LipidBank:DFA0002","KNApSAcK:C00001176","PDB-CCD:ACTACY","3DMET:B00009","NIKKAJI:J2.355H","KEGG:C00033")
xx
updateProp(rxNode, xref = xx)
updateProp
rxNode2 = getUniqueNode(graph, "Metabolite", GID ="C00034")
rxNode2
updateProp(rxNode, xref = rxNode2$xref)
updateProp(rxNode, xref = rxNode$GID)
getNode <- function(querystring){#
  h = RCurl::basicTextGatherer()#
  RCurl::curlPerform(url="localhost:7474/db/data/cypher",#
                     postfields=paste('query',RCurl::curlEscape(querystring), sep='='),#
                     writefunction = h$update,#
                     verbose = FALSE#
  ) #
  result <- jsonlite::fromJSON(h$value()) #return as data.frame#
  print(result)#
}
querystring = "MATCH (n { GID: 'C00033' }) RETURN n"
getNode(querystring)
aa = getNode(querystring)
aa$data[[1]]$data.xref
aa$data[[1]]
aa$data.xref
str(aa)
aa$data[[1]]$data$xref
quit()
library(UniProt.ws)
quit()
library(piano)
getwd()
setwd("Documents/UCD/grinn/")
mydata = read.delim("psoriasis.txt",header=T)
mydata
dim(mydata)
mydata[1:10,]
sample = c("Pso","Psa","Control")
mySetup = c(rep("Pso",10))
mySetup
mySetup = c(rep("Pso",10),rep("Psa",10),rep("Control",10))
mySetup
data.frame(mySetup)
mysetup = data.frame(mySetup)
rownames(mysetup) = colnames(mydata)[-1]
mysetup
extractFactors(mydata)
myMsData = loadMAdata(setup = mysetup,dataNorm=mydata)
myMsData
library(affy)
?loadMAdata
source("http://bioconductor.org/biocLite.R")#
biocLite("affy")
myMsData = loadMAdata(setup = mysetup,dataNorm=mydata)
biocLite("plier")
myMsData = loadMAdata(setup = mysetup,dataNorm=mydata)
myMsData
mysetip
mysetup
mydata
diffExp
mysetup
mysetup = read.delim("setup.txt",header=T)
mysetup
myMsData = loadMAdata(setup = mysetup,dataNorm=mydata)
myMsData
myMsData = loadMAdata(setup = mysetup,dataNorm = mydata)
mydata
myannotation = read.delim("annotation.txt",header=T)
myannotation
mydata
dim(mydata)
myannotation
rownames(myannotation)
myannotation[46]
myannotation[46,]
rownames(myannotation) = myannotation[,1]
myannotation
myannotation = myannotation[,-1]
myannotation
myannotation[1,]
data.frame(myannotation)
myannotation = data.frame(myannotation)
myannotation
tmp = read.delim("annotation.txt",header=T)
tmp
rownames(myannotation) = tmp[,1]
myannotation
myMS = loadMAdata(setup = "setup.txt",mydata,annotation="annotation.txt")
?diffExp
??loadMAdata
myMS = loadMAdata(setup = "setup.txt",dataNorm=mydata,annotation="annotation.txt")
myMS = loadMAdata(setup = "setup.txt",dataNorm=mydata,annotation="annotation.txt")
myMS = loadMAdata(setup = "setup.txt",dataNorm=mydata,annotation="annotation.txt")
mydata
?read.delim
mydata = read.delim("psoriasis.txt",row.names=1,header=T)
mydata
myMS = loadMAdata(setup = "setup.txt",dataNorm=mydata,annotation="annotation.txt")
myMS
myMS$dataNorm
myMS$setup
myMS$annotation
extractFactors(myMS)
pfc = diffExp(mydata,contrasts=c("Pso - Control","Psa - Control"))
pfc = diffExp(mydata,contrasts=c("Pso - Control"))
pfc = diffExp(myMS,contrasts=c("Pso - Control","Psa - Control"))
pfc
?diffExp
pfc = diffExp(myMS,contrasts=c("Pso - Control","Psa - Control"),plot="heatmap")
pfc
mydata
myMS = loadMAdata(setup = "setup.txt",dataNorm=mydata,annotation="annotation.txt")
